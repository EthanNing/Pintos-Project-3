       	    +---------------------------+
		    |		ESTR3102            |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	    |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

CHENYU JIANG <1155092088@link.cuhk.edu.hk>
YUNXIANG LI  <1155092144@link.cuhk.edu.hk>
JINGJIE NING <1155091998@link.cuhk.edu.hk>

---- PRELIMINARIES ----

>> Which files did you modify for this project?

In path /vm:
page.c page.h
frame.c frame.h
swap.c swap.h

In path /userprog:
exception.c
syscall.c
process.c

>> If you have any preliminary comments on your submission, notes for the
>> TAs, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct lock frame_table_lock;
/*Lock used when access the frame entry, because frame is not
owned by process, there might be a race condition#*/

struct list frame_table;
/*Global variable list to keep track of all frame*/

struct frame_entry {
	void *frame;
	// Pointer to the physical memory frame
   	struct thread *owner;
   	// The owner of the frame
   	struct sup_page_table_entry *spte;
   	// Pointer to the page table entry currently using this physical frame
   	struct list_elem elem;
};


struct sup_page_table_entry {
	uint8_t type;
	// Indicates whether the entry is a file, swap or mmap
   	void *uvaddr;
   	// The user virtual address of physical memory page
   	bool writable;
   	// Whether the physical page is writable or not
   	bool is_loaded;
   	// Indicates whether the entry has been loaded into

   	struct file *file;
   	// The file the page was read from
   	size_t offset;
   	// The offset from which the page was read
   	size_t read_bytes;
   	// How many are valid read bytes
   	size_t zero_bytes;
   	// How many are zero bytes

   	size_t swap_index;
   	/*If the entry is of type swap and the entry has
    been swapped to disk, this indicates the sectors
    it has been swapped to on the swap partition*/
    struct hash_elem elem;
    // The hash element to add to the supplemental
    bool no_eviction;
    //avoid race condition in eviction and page fault and syscall
 };


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Taking the following code in mmap_release_page() as example:

if(spte->is_loaded) {
	...
	void* kpage = pagedir_get_page(thread_current()->pagedir, uvaddr)
	...
	}

When giving the page (user virtual address to be precise), first we 
can use uvaddr to acquire its spte, then we can check the boolean 
variable is_loaded. If we do have a loaded spte, we can use 
pagedir_get_page() function to get its corresponding frame. 

If the loaded indcator is false, the exception is handled via 
page_fault handler. The handler will deal with this by calling 
page_load() to the fault_addr and return.


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

The only access menthod from kernel to user memory is resricted to 
uvaddr, no other ways.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We can make this sure by using one given lock and one newly-added lock.

Acquiring a new frame needs two steps: first we do frame allocation
through palloc_get_page(). In this function, we make sure that access
to bitmap, the race condition, is secured by holding pool_lock.
Secondly, when need to adding the new frame into the frame table (list),
we create a frame_table_lock in case that there is race condition when
access the frame table. Only the process holding the frame_table_lock
is able to access the frame table.

With two locks above, we can avoid race condition when both processes
need a new frame.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

New structures are mainly frame table and supplymentary page table
and their entries. We implement this by the suggestions of Pintos
Guide on Piazza.

The frame table is to keep track of all frames allocated through
calling palloc_get_page(). As written in pintos guide, "The goal
of this table is to make the process of eviction much more efficient
by keeping information about frames both readily accessible and
organized". So when doing eviction or reclamation, the specific
frame like victim will be much more easy to manage.

The supplymentary page table is add aiming to impelement page
fault and page freeing as suggested in Pintos guide. When having
page fault, the handler can access the spte to determine the loading
source, such as from file or from swap. Second is when having process
exiting, we need to refer to the spte to determine what will be freed.


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
A: Use least recently used algorithm to choose.
If a frame is used, mark it as used. When need to evict a frame, go through
the list of frame, find the one that is not used, choose it to evict,
swap to the disk or write to the file according to its type. If it is
marked as used, change to not used.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
A: When a process is terminated, the corresponding page or frame is
freed with functions. When allocate a page or a frame to a process,
the initialize function will set the new thread and new supplement page
table entry to it, no need to worry about the information left by the
previous process.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
A: If the address is inside the PHYS_BASE, then try to find the
supplemental page table entry of the address, if cannot
find, then use stack_growth.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
A: Use a parameter to say whether it can be evicted. When accessing
a page during syscall or page fault, set it as cannot be evicted.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
A: As mentioned above, when a page is accessed by page fault using
a parameter to show it cannot be evicted by now, it will
be ignored by the eviction function, until it finished page fault.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
A: When process P is in page fault, the page will be marked as cannot
be evicted, thus when process Q needs to evict a frame, the page will
be skipped.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?
A: During system calls, bring in the pages and mark it as cannot be evicted.
For invalid virtual addresses, do the same as in the project 2, if it is NULL
or outside the PHYS_BASE, terminate the process.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.
A: The way we chose to solve deadlock is to use less locks, instead of
more parameters to check the condition, for example, mark the page as
cannot be evicted. We use a lock for swap, and no else locks in this project.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct mmap_desc {
    int mapid;
    struct file* file;
    void* addr;
    int n_pages;
    struct list_elem elem;
};

Description: used for storing information about memory mapped file (similar to file_desc)

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory mapped files are loaded using the same scheme as load_segment, since they
both loads memory content from a file. Their difference is that 1. mmap files can
be written 2. it is written back to file when it is evicted, when process exits,
and when munmap is called. When a page fault happends, mmap pages will read page
content from a opened file, while swap pages will swap back pages from a swap block
device. When evicting, the content of a mmap page is written back to the file, and
the content of a swap page is stored in the swap block device.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We determined this by checking if every page that will be covered by mmap area do
not have a supplementary page table entry--which means that they are not used by
1. other mmap files 2. code segment 3. stack segment, which then means that it is
free to use.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Our implementation shared much of the code for these two situations. Since the
only difference lies in 1. whether the segment is writable 2. behavior is different
during eviction--mmap files needs to write the content back, but data segment do not.
So we used the same function to load these pages when a page fault happens. Since
they both reads from a file, the data structure needed is also very similar: file
pointer, offset... Therefore, we shared a lot of code between these two kinds of
pages, only taking special care when dealing with write-back situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
