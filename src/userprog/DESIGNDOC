		     +--------------------------+
       	       	     |		ESTR3102
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Chenyu JIANG 1155092088@link.cuhk.edu.hk

---- PRELIMINARIES ----

>> Which files did you modify for this project?

In userprog/ :
	* process.c
	* process.h
	* syscall.c
	* syscall.h
	* exception.c

In threads/ :
	* thread.c
	* thread.h

>> If you have any preliminary comments on your submission, notes for the
>> TAs, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

# explanation of inline assembly code
https://stackoverflow.com/questions/14922022/need-to-figure-out-the-meaning-of-following-inline-assembly-code

# explanation of pushl asm code
https://www.linuxquestions.org/questions/programming-9/assembly-instruction-pushl-what-it-does-315569/

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

##### in process.h #####

struct arguments {
    char* exec_name;
    char* args;
    char* fn_copy;
    struct thread *parent;
    struct semaphore * chld_sema;
};

Description: a auxiliary structure used to pass arguments into the aux*
parameter of thread_create function.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

In process_execute, the argument string is separated into two parts:
exec_name and argstring. exec_name is passed into load, and exec_name along with
argstring is passed into setup_stack. In setup_stack, argstring is pre-processed:
\0 is added to each one of the arguments. Then the whole argstring and exec_name
is pushed onto stack. Then we process the concatenated string from esp upwards
to make argv[] to be in the right order. Overflowing the stack is not detected,
because if it overflows, a page fault will be triggered, which leads to a exit
call of the thread. In this way the overflow problem is handled.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r is the reentrant version of strtok. The latter may cause race conditions
in multi-threaded environment, such as a OS kernel, because it used static
variables to store the internel state, which is shared by multiple threads.
strtok_r avoids this by returning a "remainder" string, so the behavior of the
function will be the same even if called multiple times or concurrently.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Advantage 1: It increases the security. If the kernel is responsible for processing
commands, some bugs or intentional attacks (e.g. very long arguments) may lead
to kernel panic, which will crash the whole system. However, if a shell separates
commands, bugs or attacks can at most crash the shell, which is a user program.
This will not affect other programs running in the system.

Advantage 2: It gives more flexibility to the way that programs can pass arguments.
The shell can pre-process the argument string in more ways (e.g. use libraries)
without increasing the size of the kernel or slowing it down.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

##### in process.h #####

struct file_desc  {
    int fd_number;
    struct file* file;
    struct list_elem elem;
};

Description: a file descriptor structure. It stores the original file pointer
and can be inserted to the file_desc list of struct thread.

struct chld_stat {
    struct thread *t;
    int tid;
    bool terminated;
    bool killed_by_kernel;
    int exit_status;
    struct list_elem elem;
};

Description: a struct for storing child information. It keeps track of child
process's exit information even it it have exited.

##### in thread.h #####

Added to struct thread:
	* bool exec_chld_cond;			// used in exec to keep track of child load status
	* struct thread *parent;		// pointer to the parent thread
	* struct condition wait_cond;	// condition variable used in wait
	* struct lock wait_lock;		// lock used in wait
	* struct list children;			// list of childrens of this thread
	* struct list_elem chld_elem;	// list element used in list children
	* struct list file_desc;		// list of opened file descriptors
	* int n_file_desc;				// number of current opened files
	* struct chld_stat* my_stat;	// a pointer to chld_stat struct of this thread
	* struct file* my_exec;			// keeps track of the process's executable

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Each file descriptor struct uniquely corresponds to one opened file of a process.
File descriptors are unique within the entire OS, so processes can read/write to
different positions of the same file.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

System calls obtain arguments from user space. The function is_valid_user_vaddr
is implemented to check whether a address is valid. It first checks if it is null
and if it is below PHYS_BASE. It then uses pagedir_get_page to check if the memory
page pointed by the pointer is valid. Then the pointer can be dereferenced as
normal ones. System calls also write return values to the user process. This is
done through the eax register.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

The least number of inspections for checking a full page is 2, one at the start,
and the other at the end. Because the data is only a page, it at most occupies
two pages, so two checks will make sure it is valid. We cannot do it with one
check because data may cross the border of two consecutive pages.

The least number of inspections for checking 2 bytes of data is also 2, because
it may happen that the first byte is the last byte of some page, and the second
byte is the first byte of the next. There is no room for improvement of these
numbers.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

For each process, we keep track its parent and children in the thread struct.
When wait is called, it first looks up the child's chld_stat struct from current
thread's children list. If the chld_stat exits, wait on a condition variable while
the "terminated" flag of the child is false. The "terminated" value is set to
false initially and is set to true in termination. In this way, the wait will
return immediately if the child have already terminated. At termination, the child
thread will also signal its parent's condition variable through the parent pointer.
Another field, killed_by_kernel is set in the exception handler to indicate that
the process is killed by kernel due to exception. After the parent process wakes
up, it then removes the child from its children list and frees the chld_stat
structure. Because children list is not inherited, the process is only able to
wait for its own children. And because the chld_stat is removed once parent wakes
up, a second wait call on the same pid will not succeed. The chld_stat is freed
at termination if the process's parent has already terminated (checked by is_thread).

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

The idea is to make a uniform interface for error handling, e.g. handle possible
errors before calling a procedure, and if error happens, use a set of handler to
"catch" errors happened in different places. In this implementation, before
passing the pointers to syscall functions, we check their validity. Thus we
concentrated the complexity at the entrance, making the internal process simpler.

If error is detected, such as a dereference of NULL pointer, a page fault will
be triggered. We can then free all the resources occupied by the thread by calling
exit(-1) in the page fault handler.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

After creating the new thread, the parent will wait on a semaphore. After the
load function of the child thread finishes, it will up the semaphore to wake up
its parent. The success/failure status is passed by setting a exec_chld_cond bool
value in parent's struct thread.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

* If P calls wait(C) before C exits, it will wait for C to terminate by sleeping
on a condition variable, as described in a previous question.

* If P calls wait(C) after C exists, although C's thread is freed, its chld_stat
still exists. P can access C's chld_stat and get its exit status, and then safely
free the chld_stat structure.

* If P terminates without waiting before C exits, the is_thread() check on C's
parent pointer will be false. Then, when C terminates and P is invalid, it will
free the chld_stat because no one will use it anymore.

* If P terminates without waiting after C exits, the thread pointer of C in its
chld_stat will be invalid. When P terminates, it will check all its children and
free any chld_stat that has invalid thread status.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

The method that pointers are validated before dereferencing is chosen because it
is eaisier to implement. It also gives more flexibility for us to access user
memory.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

An advantage of directly attaching file descriptors to a thread struct is that
we do not have to manage which file descriptor belongs to which thread, thus
simplifies implementation. An disadvantage is that it is more likely to have bugs
when freeing resources, since the kernel have no direct access to all files opened.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

This design is not changed.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
